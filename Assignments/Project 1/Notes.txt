Employees can login as an employee
Managers can login as a manager

-- suggests different login interface, or same interface, different layout and choices.

-- managers have employees, that is how they permit reimbursements, they permit reimbursements for employees they own.

-- each manager has
	-- an id
	-- first name
	--last name
	-- username
	--password
	
-- each employee has
	-- an id
	-- first name
	-- last name
	-- username
	-- password
	-- roles
	-- manager			fk to employee id


-- reimbursement table

 	-- manager id		fk
	-- employee id		fk
	-- reimbursement request
	-- status	(Rejected, Approved, Pending)
	-- Reason 


--limitations, if we want to combine manager and employee in one table, then we cannot make id autogenerated, or we can but we have to specify another column to indicate a manager.
	or we can give an employee id to both the manager and employee, and the manager id would be reference to the employee id.

--problem, is when loging in, the interfaces are different, so if the id of an employee and manager are the same, then we have to make a way to make the program know that a manager is a manager, and
an employee is an employee. (in case of recursive reference)

		solution to the previous to issues, is to introduce another column called 'role' which must be not null, and it would be an indicator that an employee is an employee
		and a manager is a manager.



to make it more scalable, we might need to isolate the employee from the manager, so an employee can have multiple managers (#ignore, not part of the reqs)


I need the negative tests for both daos, before transitioning to the services.


I need to decide where to put the negative number for id test, is it in the services, or the controller?



Add criteria to the insert and update functions, if the employee or manager exist, and submit a request only for an existing employee.

or do that in the front end.


the web page will hold the information of whether the instance is an employee or a manager, so nothing you do for the javalin, javalin does not need to check for anything.


after spending a whole day dealing with hibernate intricacies and dealing with 

{ Lazy Initialization Exception, Multiple Fetch type exception, Gson stack overflow,
   
NEVER USE ASSOCIATIONS EVER AGAIN. EVER

every column is a column.
  }
