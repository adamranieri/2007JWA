package dev.alsabea.daos.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import dev.alsabea.connectionUtils.ConnectionUtils;
import dev.alsabea.daos.AccountDao;
import dev.alsabea.daos.AccountDao;
import dev.alsabea.entities.Account;
import dev.alsabea.exceptions.DaoException;
import dev.alsabea.entities.Account;

public class AccountDaoImpl implements AccountDao{

private static AccountDaoImpl dao = null;
	
	private AccountDaoImpl() {
		
	};
	
	public static AccountDao getAccountDao() {
		
		if(dao == null) {
			dao = new AccountDaoImpl();
			return dao;
		}else {
			return dao;
		}
		
	}

	
	 private static final String insertSQL = "INSERT INTO account (customer_id, "
	 		+ "account_name, balance) VALUES (?, ?, ?);";

	@Override
	public boolean create(Account t) {
		final String insertMySql= "INSERT INTO proj_0_db.account (customer_id, account_name, balance)"
				+ " VALUES (?, ?, ?) ";
		Connection con= ConnectionUtils.getConnection();
		
		try (PreparedStatement ps= con.prepareStatement(insertMySql)){
			ps.setString(1, t.getCustomerId());
			ps.setString(2, t.getAccountName());
			ps.setInt(3, t.getBalance());
			if (ps.executeUpdate()!= 1)
				throw new DaoException("sql query did not update the expected number of rows");
		} catch (Exception e){
			e.printStackTrace();
		}
		return true;
	}

	@Override
	public boolean delete(int id) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Account retrieveById(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean update(Account t) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<Account> getAccounts(int id) {
		final String sqlStmt= "SELECT * FROM proj_0_db.account WHERE customer_id = ?";
		
		Connection con= ConnectionUtils.getConnection();
		ResultSet rs= null;
		List<Account> accts= new ArrayList<>();
		
		try (PreparedStatement ps= con.prepareStatement(sqlStmt)){
			ps.setInt(1, id);
			rs= ps.executeQuery();
			
			while (rs.next()) {
				accts.add(extractFromRs(rs));
			}

			
		} catch (Exception e){
			e.printStackTrace();
		}

		return accts;
	}

	private Account extractFromRs(ResultSet rs) {
		Account a = new Account();
		
		try {
			a.setAccountId(rs.getInt("account_id"));
			a.setCustomerId(rs.getInt("customer_id"));
			a.setAccountName(rs.getString("account_name"));
			a.setBalance(rs.getInt("balance"));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return a;
	}

	
}
