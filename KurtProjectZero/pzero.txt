You have to create a backend API for a banking application. This application is designed to allow users to perform CRUD operations
to a database.

An API is a way for someone to communicate with your program. Think of a Scanner. However we will be using HTTP and 
web servers.

*we have not covered APIs yet. However you will still be able to create DAOs and services and tests
- technical requirements
Application must follow Controller - Service - DAO layering and be coded to interfaces
The API must follow RESTful Naming conventions.
Every Service and DAO method must be tested in JUnit 
Every URL endpoint must have a postman test
There are two resources for this REST API (you will be recieving a more detailed breakdown when we cover APIs monday)
- customers
- Accounts
customers have accounts 
customer attributes
    - cId
    - username
    - password
    - array of accounts
account attributes
    - aId
    - cId (owner of the account)
    - account name i.e "My Savings" or "Vacation Fund"
    - balance
*negative balances are not allowed this should cause an exception
Bonus
- Transaction Resource
    - this resource keeps track of updates to the balance of customers accounts
- Transaction attributes
    - tId
    - aId (account this transaction is part of)
    - prevBalance
    - finalBalance


---------------------------------------------------------------------------------------

    
    api specs
/customers/{cId}/accounts/{aId}
You should flesh out the following api to support the following operations
on both the customer and account resources. The appropriate status codes should be
returned. 201 for created, 200 for all other successes, 404 for not found
    - get
    - post
    - put
    - delete
customers should have optional query params of 
/customers?username=smith65
accounts should have optional query params of 
/customers/10/accounts?balancegreaterthan=2000
/customers/10/accounts?balancelessthan=5000
these can be combined for
/customers/10/accounts?balancelessthan=5000&balancegreaterthan=2000
YOU MUST HAVE POSTMAN TESTS FOR EVERY API ENDPOINT!!!!!
- they should be saved as one collection
- you should be adding postman tests in the tests section as appropriate
    
